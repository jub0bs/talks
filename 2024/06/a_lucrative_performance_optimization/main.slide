R√©cit d'une optimisation de performance lucrative üí∏
25 Jun 2024
Golang Paris meetup

Julien Cretel (a.k.a. jub0bs)

https://jub0bs.com
https://bsky.app/profile/jub0bs.com
https://infosec.exchange/@jub0bs



* Cahier des charges (simplifi√©)

  // A Bouncer has the knowledge of a list of guests to some recurring dinner party.
  type Bouncer struct

  // NewBouncer returns a new Bouncer whose guest names correspond to lowercased elements of guests.
  func NewBouncer(guests ...string) *Bouncer

  // Check verifies whether csv is a sorted list of comma-separated, lowercase, and unique guests;
  // if so, it returns a csv of all those candidates and true;
  // otherwise, it returns the empty string and false.
  func (b Bouncer) Check(csv string) (string, bool)

Remarque : `Check` est cens√©e √™tre appel√©e bien plus de fois que `NewBouncer`.

.image https://raw.githubusercontent.com/egonelbre/gophers/master/vector/party/birthday.svg 200 _



* Version initiale (1/2)

  type Bouncer struct {
    guests []string
  }

  func NewBouncer(guests ...string) *Bouncer {
    normalized := make([]string, 0, len(guests))
    for _, guest := range guests {
      normalized = append(normalized, strings.ToLower(guest))
    }
    return &Bouncer{guests: normalized}
  }



* Version initiale (2/2)

  func (b Bouncer) Check(csv string) (string, bool) {
    if csv == "" {
      return "", true
    }
    candidates := strings.Split(csv, ",")
    var accepted []string
    for _, candidate := range candidates {
      var ok bool
      for _, guest := range b.guests {
        normalized := strings.ToLower(guest)
        if candidate == normalized {
          accepted = append(accepted, normalized)
          ok = true
          break
        }
      }
      if !ok {
        return "", false
      }
    }
    return strings.Join(accepted, ","), true
  }

: https://go.dev/play/p/n9jBAILDkwE



* Piste d'am√©lioration : complexit√© inutilement quadratique

`Check` fait intervenir deux boucles imbriqu√©es :

- une control√©e par le nombre de candidats (n), et
- une autre contr√¥l√©e par le nombre d'invit√©s (m).

La complexit√© dans le pire des cas est Œò(m * n).



* Stockage des invit√©s dans un ensemble plut√¥t qu'une slice (1/3)

Cr√©ons une petite abstraction pour promouvoir la lisibilit√© :

  type Set map[string]struct{}

  func NewSet() Set {
    return make(Set)
  }

  func (s Set) Add(elem string) {
    s[elem] = struct{}{}
  }

  func (s Set) Contains(elem string) bool {
    _, found := s[elem]
    return found
  }

: https://go.dev/play/p/o1neiMBtKKb


* Stockage des invit√©s dans un ensemble plut√¥t qu'une slice (2/3)

  type Bouncer struct {
    guests Set
  }

  func NewBouncer(guests ...string) *Bouncer {
    set := NewSet()
    for _, guest := range guests {
      set.Add(strings.ToLower(guest))
    }
    return &Bouncer{guests: set}
  }



* Stockage des invit√©s dans un ensemble plut√¥t qu'une slice (3/3)

  func (b Bouncer) Check(csv string) (string, bool) {
    if csv == "" {
      return "", true
    }
    candidates := strings.Split(csv, ",")
    var accepted []string
    for _, candidate := range candidates {
      if !b.guests.Contains(candidate) {
        return "", false
      }
      accepted = append(accepted, candidate)
    }
    return strings.Join(accepted, ","), true
  }



* Piste d'am√©lioration : fractionnement (Split) et jonction (Join) inutiles

Il n'est pas n√©cessaire de fractionner `csv` et de renvoyer une cha√Æne de caract√®res distincte en r√©sultat !

- S'il y a un probl√®me, on renvoie `"",`false`.
- Autrement, on peut simplement renvoyer `csv,`true`.

.image https://raw.githubusercontent.com/egonelbre/gophers/master/vector/arts/ballet.svg 200 _



* Solution : consommer la cha√Æne de caract√®res sans la fractionner

  func (b Bouncer) Check(csv string) (string, bool) {
    if csv == "" {
      return "", true
    }
    var (
      candidate  string
      commaFound bool
    )
    for {
      candidate, csv, commaFound = strings.Cut(csv, ",")
      if !b.guests.Contains(candidate) {
        return "", false
      }
      if !commaFound {
        break
      }
    }
    return csv, true
  }



* Probl√®me : aucune v√©rification de l'ordre ou de pr√©sence de doublons

Tous les candidats ne sont pas bien intentionn√©s... Certains sont des trolls !

Par exemple, la liste de candidats suivante contient beaucoup de doublons :

  foo,foo,foo,foo,...

Et celle-l√† n'est pas ordonn√©e de mani√®re lexicographique :

  foo,bar,baz

.image https://raw.githubusercontent.com/egonelbre/gophers/master/vector/science/gas-mask.svg 200 _



* Solution : utilisation d'un ensemble ordonn√© (1/3)

  type SortedSet map[string]int

  func NewSet(elems ...string) SortedSet {
    sorted := slices.Clone(elems)
    slices.Sort(sorted)
    sorted = slices.Compact(sorted)
    m := make(map[string]int, len(sorted))
    for i, elem := range sorted {
      m[elem] = i
    }
    return SortedSet(m)
  }

  func (s SortedSet) Position(elem string) int {
    pos, found := s[elem]
    if !found {
      return -1
    }
    return pos
  }



* Solution : utilisation d'un ensemble ordonn√© (2/3)

  type Bouncer struct {
    guests SortedSet
  }

  func NewBouncer(guests ...string) *Bouncer {
    normalized := slices.Clone(guests)
    for i := range guests {
      normalized[i] = strings.ToLower(guests[i])
    }
    return &Bouncer{guests: NewSet(normalized...)}
  }



* Solution : utilisation d'un ensemble ordonn√© (3/3)

  func (b Bouncer) Check(csv string) (string, bool) {
    if csv == "" {
      return "", true
    }
    var (
      name          string
      commaFound    bool
      posOfLastSeen = -1
    )
    for {
      name, csv, commaFound = strings.Cut(csv, ",")
      pos := b.guests.Position(name)
      if pos == -1 || pos <= posOfLastSeen {
        return "", false
      }
      posOfLastSeen = pos
      if !commaFound {
        break
      }
    }
    return csv, true
  }



* Autre pistes d'am√©lioration (√† titre d'exercice)

Un nom de candidat tr√®s long force la consommation int√©grale de la cha√Æne de caract√®res en entr√©e:

  foo,foobarbazfoobarbazfoobarbazfoobarbazfoobarbaz...

D'autre part, on pourrait √©liminer certaines v√©rification des limites (_bounds_check_) redondantes.

.image https://raw.githubusercontent.com/egonelbre/gophers/master/vector/fairy-tale/sage.svg 200 _



* CORS en deux mots

- "Cross-Origin Resource Sharing" ou "partage des ressources entre origines multiples" en fran√ßais.
- Un m√©canisme pour lever certaines restrictions li√©es √† [[https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy][la _Same-Origin_Policy_]], codifi√© par le [[http://fetch.spec.whatwg.org/][Fetch standard]].
- Configur√© c√¥t√© serveur ; impl√©ment√© par les navigateurs ; impos√© aux clients.
- Contrairement √† une croyance populaire et tenace, CORS ne constitue pas une d√©fense contre une quelconque faille de s√©curit√© Web !
- Deboguer des probl√®mes li√©s √† CORS est sans doute la pire hantise des d√©veloppeurs¬∑euses Web !

.image ./img/cors_logo.png 150 _



* CORS (avec pr√©-v√©rification) en un diagramme

.image ./img/preflight.svg 500 _

: - CORS: what is it? hantise des dev, sujet d'incompr√©hension multiples et vari√©s, regardless of ecosystem



* CORS : un sujet que j'affectionne

- [[https://github.com/jub0bs/cors]]
- [[https://jub0bs.com/posts/2022-08-04-scraping-the-bottom-of-the-cors-barrel-part1/][Scraping the bottom of the CORS barrel (part 1)]]
- [[https://jub0bs.com/posts/2023-02-08-fearless-cors/][Fearless CORS: a design philosophy for CORS middleware libraries (and a Go implementation)]]
- [[https://jub0bs.com/posts/2024-04-27-jub0bs-cors-a-better-cors-middleware-library-for-go/][jub0bs/cors: a better CORS middleware library for Go]]
- [[https://jub0bs.com/posts/2024-05-14-reconfigurable-cors-middleware/][Reconfigurable CORS middleware with jub0bs/cors]]
- [[https://www.youtube.com/watch?v=5uM6z7RnReE][Useful Functional-Options Tricks for Better Libraries (GopherCon EU 2023)]]

.image https://raw.githubusercontent.com/egonelbre/gophers/master/vector/friends/heart-hug.svg 200 _

: - worked on a first CORS middleware, presented it at GopherCon; then second one because backlash against funcopts


* jub0bs/cors : peut-√™tre la meilleure biblioth√®que CORS pour Go

.image ./img/bit.ly_jub0bs-cors.png 500 _



* Lien entre notre type Bouncer et CORS

Une config CORS sp√©cifie quels ent√™tes de requ√™te sont autoris√©s : ce sont les *invit√©s*.

Certaines requ√™tes de pr√©-v√©rification (_preflight_) CORS contiennent un ent√™te appel√© `Access-Control-Request-Headers` : il contient les *candidats*.

Le middleware CORS est cens√© lister les candidats autoris√©s dans un ent√™te de r√©ponse appel√© `Access-Control-Allow-Headers` : c'est ce que fait *notre*m√©thode*Check*.

.image ./img/preflight.svg 300 _



* Risque de d√©ni de service d√ª √† github.com/rs/cors

La biblioth√®que CORS pour Go [[https://deps.dev/go/github.com%2Frs%2Fcors/v1.11.0/dependents][tr√®s populaire]], mais loin d'√™tre id√©ale.

Le traitement de l'ent√™te `Access-Control-Request-Headers` dans rs/cors v1.10.1 est tr√®s similaire √† l'impl√©mentation initiale du `Bouncer`.

Probl√®me : un nombre m√™me modeste de requ√™tes de pr√©-v√©rification falsifi√©es [[https://github.com/rs/cors/issues/170][occasionne une quantit√© prohibitive d'allocations sur le tas]], ce qui est susceptible de crasher un serveur aux resources modestes. C'est le cas de [[https://github.com/prometheus/alertmanager][l'Alert Manager de Prometheus]].

Solution : [[https://github.com/rs/cors/pull/171][en gros]], les am√©liorations que l'on vient de couvrir ensemble.

.image https://raw.githubusercontent.com/egonelbre/gophers/master/vector/science/gas-mask.svg 200 _

: reproduce the PoC that kills an instance of alertmanager with limited memory? would be live coding
: - in Go, rs/cors is the most popular, various others specialised for routers



* R√©sultats de benchmarks

  goos: darwin
  goarch: amd64
  pkg: github.com/rs/cors
  cpu: Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz
                             ‚îÇ     before     ‚îÇ                 after                 ‚îÇ
                             ‚îÇ     sec/op     ‚îÇ    sec/op      vs base                ‚îÇ
  PreflightAdversarialACRH-8   33214.5n ¬±  0%    360.9n ¬±  4%  -98.91% (p=0.000 n=10)
  geomean                        82.91n          45.86n        -44.69%

                             ‚îÇ     before      ‚îÇ                after                 ‚îÇ
                             ‚îÇ      B/op       ‚îÇ    B/op     vs base                  ‚îÇ
  PreflightAdversarialACRH-8   36904.00 ¬± 0%     32.00 ¬± 0%  -99.91% (p=0.000 n=10)
  geomean                                    ¬≤               -58.58%                ¬≤
  ¬π all samples are equal
  ¬≤ summaries must be >0 to compute geomean

                             ‚îÇ    before    ‚îÇ                after                 ‚îÇ
                             ‚îÇ  allocs/op   ‚îÇ allocs/op   vs base                  ‚îÇ
  PreflightAdversarialACRH-8   4.000 ¬± 0%     2.000 ¬± 0%  -50.00% (p=0.000 n=10)
  geomean                                 ¬≤                -8.30%                ¬≤
  ¬π all samples are equal
  ¬≤ summaries must be >0 to compute geomean



* Le Patch Rewards Program de Google

Google, √† travers son [[https://bughunters.google.com/about/rules/open-source/4928084514701312/patch-rewards-program-rules][_Patch_Rewards_Program_]], offre des r√©compenses pour la correction de bogues de s√©curit√© dans certains projets en source ouverte.

Le projet [[https://github.com/google/certificate-transparency-go][github.com/google/certificate-transparency-go]] et ses d√©pendances directes sont dans le p√©rim√®tre de ce programme, et rs/cors fait partie de ces d√©pendances...

.image https://raw.githubusercontent.com/egonelbre/gophers/master/vector/friends/heart-balloon.svg 200 _



* Quelques jours plus tard...

.image ./img/5k_reward.png 400 _


: https://github.com/jub0bs/go-perf-workshop
: Check is called way more times than NewBouncer



* Favorisez la programmation d√©fensive

- Gardez √† l'esprit que nous ne vivons pas dans un monde de Bisounours.
- L'utilisation c√¥t√© serveur d'un algorithme inefficace peut permettre un d√©ni de service ; voir [[https://cwe.mitre.org/data/definitions/405.html][CWE 405: Asymmetric Resource Consumption (Amplification)]].
- Ignorez/renversez [[https://en.wikipedia.org/wiki/Robustness_principle][la "loi" de Postel]]. Lorsque vous impl√©mentez une sp√©cification, appliquez la √† la lettre et tirez parti de toutes les garanties qu'elle fournit.

.image https://raw.githubusercontent.com/egonelbre/gophers/master/vector/fairy-tale/knight.svg 200 _



* $$$

Vous aussi, vous pouvez mettre du beurre dans les √©pinards en [[https://bughunters.google.com/open-source-security][identifiant]] et/ou en [[https://bughunters.google.com/about/rules/open-source/4928084514701312/patch-rewards-program-rules][corrigeant]] des failles de s√©curit√© (m√™me mineures) dans certains projets en source ouverte.

.image https://go.dev/blog/gophergala/fancygopher.jpg 300 _
